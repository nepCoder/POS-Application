//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.8.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace POS.Application.LLBL.SqlServer
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'SpCustomerDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerDelCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCustomerIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerInsCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCustomerUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerUpdCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpProductDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpProductDelCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpProductIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpProductInsCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpProductUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpProductUpdCallBack(ref System.String json, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'SpCustomerDel'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerDel(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerDel(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerDel'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerDel(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpCustomerDelCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerDel'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerDelResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerDelResult> SpCustomerDelAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpCustomerDelAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerDel'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerDelResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerDelResult> SpCustomerDelAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpCustomerDelCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpCustomerDelResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerIns'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerIns(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerIns(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerIns'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerIns(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpCustomerInsCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerIns'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerInsResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerInsResult> SpCustomerInsAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpCustomerInsAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerIns'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerInsResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerInsResult> SpCustomerInsAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpCustomerInsCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpCustomerInsResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpd'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerUpd(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerUpd(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpd'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerUpd(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpCustomerUpdCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpd'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerUpdResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerUpdResult> SpCustomerUpdAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpCustomerUpdAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpd'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerUpdResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerUpdResult> SpCustomerUpdAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpCustomerUpdCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpCustomerUpdResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductDel'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductDel(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpProductDel(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpProductDel'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductDel(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpProductDelCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductDel'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductDelResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductDelResult> SpProductDelAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpProductDelAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductDel'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductDelResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductDelResult> SpProductDelAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpProductDelCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpProductDelResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductIns'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductIns(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpProductIns(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpProductIns'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductIns(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpProductInsCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductIns'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductInsResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductInsResult> SpProductInsAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpProductInsAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductIns'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductInsResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductInsResult> SpProductInsAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpProductInsCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpProductInsResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductUpd'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductUpd(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpProductUpd(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpProductUpd'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpProductUpd(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpProductUpdCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductUpd'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductUpdResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductUpdResult> SpProductUpdAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpProductUpdAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpProductUpd'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpProductUpdResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpProductUpdResult> SpProductUpdAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpProductUpdCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpProductUpdResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Creates the call object for the call 'SpCustomerDel' to stored procedure 'SpCustomerDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerDelCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Bikash].[dbo].[SpCustomerDel]", "SpCustomerDel")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpCustomerIns' to stored procedure 'SpCustomerIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerInsCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Bikash].[dbo].[SpCustomerIns]", "SpCustomerIns")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpCustomerUpd' to stored procedure 'SpCustomerUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerUpdCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Bikash].[dbo].[SpCustomerUpd]", "SpCustomerUpd")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpProductDel' to stored procedure 'SpProductDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpProductDelCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Bikash].[dbo].[SpProductDel]", "SpProductDel")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpProductIns' to stored procedure 'SpProductIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpProductInsCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Bikash].[dbo].[SpProductIns]", "SpProductIns")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpProductUpd' to stored procedure 'SpProductUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpProductUpdCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Bikash].[dbo].[SpProductUpd]", "SpProductUpd")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}


		/// <summary>Return value struct for the async method SpCustomerDelAsync().</summary>
		public struct SpCustomerDelResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpCustomerInsAsync().</summary>
		public struct SpCustomerInsResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpCustomerUpdAsync().</summary>
		public struct SpCustomerUpdResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpProductDelAsync().</summary>
		public struct SpProductDelResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpProductInsAsync().</summary>
		public struct SpProductInsResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpProductUpdAsync().</summary>
		public struct SpProductUpdResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

	}
}
